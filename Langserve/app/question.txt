다음을 한글 다섯 문장으로 요약해줘
==================================================
제럴드는 작은 팀에서 일하는 코더였다. 그런데 문제가 좀 있었다.
그를 제외한 다른 코더들은 깔끔하지 않은 코드를 작성했다.
똥 덩어리 코드는 해롭고 사악했으며 사람을 미치게 만들었다.
악마와 같은 일 중독자들의 무자비한 폐기물이었다. 하지만 제럴드는 성실함을 잃지 않고 있었다.
이런 것들을 그대로 놔둘 수 없었다.

제럴드는 어처구니없는 내부 구조와 혼란스럽기 짝이 없는 변수 명을 수정하기 위한 계획을 고안했다.
지속적으로 사람을 미치게 만드는 부자연스러운 제어 흐름도 변경했다.

초기 과정에서 발 밑에 깔린 버그와 복잡한 소프트웨어를 수정하기 위해 채택한 방법은 바로 로버트 마틴의 ‘보이스카우트 규칙’이었다.
여기서는 정리하고 저기서는 버그를 수정하며, 왼쪽 오른쪽 번갈아가며 리팩터링하는 등의 과정을 거치는 동안,
프로그램은 금세 다 괜찮아질 것만 같았다.

하지만 늙고 불쌍한 제럴드는 계획을 짜고 실행하는 과정에서 중요한 사실 한 가지를 놓치고 있었다.
수정을 위해서는 모든 프로그래머가 합의를 해야 했다. 그의 날라리 코딩 동료들은 규칙을 비웃으며,
제럴드가 문제를 해결하는 와중에도 허튼 코드를 계속해서 짜냈다.

한 걸음 나아가면 두 걸음 물러나는 형국이었다. 제럴드는 언제까지고 헛수고만 하고 있었다.
더 과격한 입장을 견지해야 함을 깨닫기 전까지 그 같은 상황은 계속되었다.
애자일팀은 대단하며 깔끔한 코드는 최선이다. 하지만 이를 실현하기 위해서는 코드가
아니라 팀을 개선해야 했다.

콘웨이의 법칙은 소프트웨어가 어떻게 팀을 따라가는지에 대해 설명한다. 괜찮은 소프트웨어는 기름이 잘 쳐진 기계에서 만들어진다.
만약 톱니바퀴의 이가 걸리거나 삐걱거리고 할 일을 제대로 하지 않고 있다면, 그 대안은 아예 없애버리는 것뿐이라고 제럴드는 생각했다.
팀 리팩토링을 시작하면서 그가 사용한 패턴은 ‘상위로부터의 매개 변수화’였다. 여기서 관리자는 갑작스러운 해고의 대상이 되었다.
관리자는 그야말로 맨홀 아래로 추락했다. 가히 살인적이라 할 만큼 급작스럽고 충격적인 일이었다. 제럴드는 그것을 ‘팀 위생’이라 불렀다.
그러고 나니 어쨌든 하나의 문제는 해결되었다.

그리고 이제는 팀원들 하나하나가 차례로 비정상적 상황에 처하게 되었다. 문제의식이 없는 QA팀을 향해서는 접시가 날아갔다.
그러한 분노를 자아낸 원인을 제공한 프로그래머들 역시 잔혹한 결과를 맞이했다.

그중에서도 ‘프린터에 넥타이가 낀’ 한 프로그래머의 체면은 결코 회복되지 못했다. 잠깐 쉬러 위층으로 올라가던 어떤 프로그래머의 뒤통수에는
어마어마한 Unix 매뉴얼 더미가 날아 들었다.

한편 제럴드의 삶은 크게 나아졌다. 팀 규모는 이제 코더 한 명, 시스템 관리자 한 명, 문 앞을 지키는 한 명 정도의 규모로 축소했다.
이런 상황에서 제럴드는 마침내 코드가 더 이상 나빠지지 않는다는 점을 발견했다! 하지만 남아 있는 코더가 없다 보니 크게 변하는 일도 없었다.
진전은 더디고 힘들었지만 영웅 제럴드는 노력했다. 마감 일정은 휙 하는 소리를 내며 금세
다가왔다. 기능은 엄청나게 부족했고, 프로젝트는 웃음거리가 되었다.

그러던 어느 날 경찰이 찾아왔고 제럴드는 감방에 갇혔다.
이 간단한 이야기가 주는 교훈은, 무신경한 코더 동료들이 자신을 절망에 빠뜨리는 상황에서
도 주의 깊게 반응해야 한다는 것이다. 유일하면서도 적절한 방법은 영국식으로 복수하라는
것이다. 즉 숨겨진 분노와 미움을 적절한 수준까지만 품으라는 것이다.

